drop policy "Admins can read all disputes" on "public"."disputes";

drop policy "Allow authenticated users to delete their own tradelines" on "public"."tradelines";

drop policy "Allow authenticated users to insert their own tradelines" on "public"."tradelines";

drop policy "Allow authenticated users to update their own tradelines" on "public"."tradelines";

drop policy "Users can manage their own tradelines" on "public"."tradelines";

drop policy "Users can read their own tradelines" on "public"."tradelines";

drop policy "Allow system to change user roles to admin" on "public"."user_roles";

alter table "public"."tradelines" drop constraint "tradelines_user_id_key";

drop index if exists "public"."tradelines_user_id_key";

alter table "public"."audit_history" add column "user_id" uuid default gen_random_uuid();

alter table "public"."audit_history" alter column "id" set generated by default;

alter table "public"."disputes" add column "email" text;

create policy "Allow insert to audit history"
on "public"."audit_history"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "Allow users to read their audit history"
on "public"."audit_history"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Allow insert to dispute logs"
on "public"."dispute_log"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "Allow users to read their own dispute logs"
on "public"."dispute_log"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Allow users to read their profile"
on "public"."profiles"
as permissive
for select
to public
using ((auth.uid() = id));


create policy "Allow user to read own tradelines"
on "public"."tradelines"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Allow user to read their tradelines"
on "public"."tradelines"
as permissive
for select
to public
using ((user_id = auth.uid()));


create policy "Allow users to delete their own tradelines"
on "public"."tradelines"
as permissive
for delete
to public
using ((auth.uid() = user_id));


create policy "Allow users to insert their own tradelines"
on "public"."tradelines"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "Allow users to read their own tradelines"
on "public"."tradelines"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Allow users to read their tradelines"
on "public"."tradelines"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Allow users to update their own tradelines"
on "public"."tradelines"
as permissive
for update
to public
using ((auth.uid() = user_id));


create policy "Allow user to add their own files"
on "public"."user_documents"
as permissive
for insert
to authenticated
with check ((user_id = auth.uid()));


create policy "Allow user to delete their own files"
on "public"."user_documents"
as permissive
for delete
to authenticated
using ((user_id = auth.uid()));


create policy "Allow user to read their own files"
on "public"."user_documents"
as permissive
for select
to authenticated
using ((user_id = auth.uid()));


create policy "Allow user to update their own files"
on "public"."user_documents"
as permissive
for update
to authenticated
using ((user_id = auth.uid()))
with check ((user_id = auth.uid()));



